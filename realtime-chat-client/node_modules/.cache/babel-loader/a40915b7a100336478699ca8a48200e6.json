{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/Chat.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql, useQuery } from '@apollo/client';\nimport styled from 'styled-components';\nconst GET_MESSAGES = gql`\nquery {\n  messages {\n    id\n    content\n    user\n  }\n}`;\nconst Button = styled.button`\n  \n  border-radius: 3px;\n  border: 1px solid #FFFFFF;\n  background: #ffffff;\n  box-shadow:  10px 10px 20px #d9d9d9, -10px -10px 20px #ffffff;\n`;\n_c = Button;\nconst Input = styled.input`\n  border-radius: 5px;\n  margin-right: 30px;\n  margin-top: 30px;\n  border: 1px solid #FFFFFF;\n  background: #ffffff;\n  box-shadow:  20px 20px 30px #0F296B, -20px -20px 30px #ffffff;\n  font-size: 12pt;\n  text-align: left;\n  color: #63717f;\n`;\n_c2 = Input;\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/\",\n  cache: new InMemoryCache()\n});\n\nconst Messages = ({\n  user\n}) => {\n  _s();\n\n  const {\n    data\n  } = useQuery(GET_MESSAGES);\n\n  if (!data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: data.messages.map(({\n      id,\n      user: messageUser,\n      content\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: user === messageUser ? \"flex-end\" : \"flex-start\",\n        paddingBottom: \"1em\"\n      },\n      children: [user !== messageUser && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 50,\n          width: 50,\n          marginRight: '0.5em',\n          border: '2px solid #e5e6ea',\n          borderRadius: 25,\n          textAlign: \"center\",\n          fontSize: \"18pt\",\n          paddingTop: 5\n        },\n        children: messageUser.slice(0, 2).toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: user === messageUser ? \"#58bf56\" : \"#e5e6ea\",\n          color: user === messageUser ? \"white\" : \"black\",\n          padding: \"1em\",\n          borderRadius: \"1em\",\n          maxWidth: \"60%\"\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }, this))\n  }, void 0, false);\n};\n\n_s(Messages, \"JtionF1PqWN50DPWu724eJIU2SM=\", false, function () {\n  return [useQuery];\n});\n\n_c3 = Messages;\n\nconst Chat = () => {\n  _s2();\n\n  const [state, stateSet] = React.useState({\n    user: \"Jack\",\n    content: ''\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Messages, {\n      user: state.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      label: \"User\",\n      value: state.user,\n      onChange: evt => stateSet({ ...state,\n        user: evt.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      label: \"Content\",\n      value: state.content,\n      onChange: evt => stateSet({ ...state,\n        content: evt.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Chat, \"2Gq2A7lLFqUAZdpx7mx1zfhpdq8=\");\n\n_c4 = Chat;\nexport default (() => /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 127,\n  columnNumber: 3\n}, this));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Messages\");\n$RefreshReg$(_c4, \"Chat\");","map":{"version":3,"sources":["/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/Chat.js"],"names":["React","useState","ApolloClient","InMemoryCache","ApolloProvider","gql","useQuery","styled","GET_MESSAGES","Button","button","Input","input","client","uri","cache","Messages","user","data","messages","map","id","messageUser","content","display","justifyContent","paddingBottom","height","width","marginRight","border","borderRadius","textAlign","fontSize","paddingTop","slice","toUpperCase","background","color","padding","maxWidth","Chat","state","stateSet","evt","target","value"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACIC,YADJ,EAEIC,aAFJ,EAGIC,cAHJ,EAIIC,GAJJ,EAKIC,QALJ,QAMO,gBANP;AAOA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,YAAY,GAAGH,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,EAPA;AASA,MAAMI,MAAM,GAAGF,MAAM,CAACG,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA,CANA;KAAMD,M;AASN,MAAME,KAAK,GAAGJ,MAAM,CAACK,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;MAAMD,K;AAYN,MAAME,MAAM,GAAG,IAAIX,YAAJ,CAAiB;AAC5BY,EAAAA,GAAG,EAAE,wBADuB;AAE5BC,EAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAFqB,CAAjB,CAAf;;AAKA,MAAMa,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC3B,QAAO;AAAEC,IAAAA;AAAF,MAAWZ,QAAQ,CAACE,YAAD,CAA1B;;AACA,MAAI,CAACU,IAAL,EAAY;AACR,WAAO,IAAP;AACH;;AAED,sBACI;AAAA,cACIA,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkB,CAAC;AAAEC,MAAAA,EAAF;AAAMJ,MAAAA,IAAI,EAAEK,WAAZ;AAAyBC,MAAAA;AAAzB,KAAD,kBAChB;AACE,MAAA,KAAK,EAAE;AACHC,QAAAA,OAAO,EAAE,MADN;AAEHC,QAAAA,cAAc,EAAER,IAAI,KAAKK,WAAT,GAAuB,UAAvB,GAAoC,YAFjD;AAGHI,QAAAA,aAAa,EAAE;AAHZ,OADT;AAAA,iBAOET,IAAI,KAAKK,WAAT,iBACE;AACA,QAAA,KAAK,EAAE;AACHK,UAAAA,MAAM,EAAE,EADL;AAECC,UAAAA,KAAK,EAAE,EAFR;AAGCC,UAAAA,WAAW,EAAE,OAHd;AAICC,UAAAA,MAAM,EAAE,mBAJT;AAKCC,UAAAA,YAAY,EAAE,EALf;AAMCC,UAAAA,SAAS,EAAE,QANZ;AAOCC,UAAAA,QAAQ,EAAE,MAPX;AAQCC,UAAAA,UAAU,EAAE;AARb,SADP;AAAA,kBAaIZ,WAAW,CAACa,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,EAAwBC,WAAxB;AAbJ;AAAA;AAAA;AAAA;AAAA,cARJ,eA0BA;AACE,QAAA,KAAK,EAAE;AACHC,UAAAA,UAAU,EAAEpB,IAAI,KAAKK,WAAT,GAAuB,SAAvB,GAAmC,SAD5C;AAEHgB,UAAAA,KAAK,EAAErB,IAAI,KAAKK,WAAT,GAAuB,OAAvB,GAAiC,OAFrC;AAGHiB,UAAAA,OAAO,EAAE,KAHN;AAIHR,UAAAA,YAAY,EAAE,KAJX;AAKHS,UAAAA,QAAQ,EAAE;AALP,SADT;AAAA,kBASIjB;AATJ;AAAA;AAAA;AAAA;AAAA,cA1BA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AADJ,mBADJ;AA4CH,CAlDD;;GAAMP,Q;UACgBV,Q;;;MADhBU,Q;;AAqDN,MAAMyB,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB3C,KAAK,CAACC,QAAN,CAAe;AACrCgB,IAAAA,IAAI,EAAE,MAD+B;AAErCM,IAAAA,OAAO,EAAE;AAF4B,GAAf,CAA1B;AAIA,sBACI;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEmB,KAAK,CAACzB;AAAtB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AACI,MAAA,KAAK,EAAC,MADV;AAEI,MAAA,KAAK,EAAEyB,KAAK,CAACzB,IAFjB;AAGI,MAAA,QAAQ,EAAG2B,GAAD,IAASD,QAAQ,CAAC,EACxB,GAAGD,KADqB;AAExBzB,QAAAA,IAAI,EAAE2B,GAAG,CAACC,MAAJ,CAAWC;AAFO,OAAD;AAH/B;AAAA;AAAA;AAAA;AAAA,YAFJ,eASI,QAAC,KAAD;AACI,MAAA,KAAK,EAAC,SADV;AAEI,MAAA,KAAK,EAAEJ,KAAK,CAACnB,OAFjB;AAGI,MAAA,QAAQ,EAAGqB,GAAD,IAASD,QAAQ,CAAC,EACxB,GAAGD,KADqB;AAExBnB,QAAAA,OAAO,EAAEqB,GAAG,CAACC,MAAJ,CAAWC;AAFI,OAAD;AAH/B;AAAA;AAAA;AAAA;AAAA,YATJ,eAgBA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAzBD;;IAAML,I;;MAAAA,I;AA2BN,gBAAe,mBACb,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAE5B,MAAxB;AAAA,yBACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADF","sourcesContent":["import React, { useState } from 'react';\nimport { \n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    gql,\n    useQuery\n} from '@apollo/client';\nimport styled from 'styled-components';\n\nconst GET_MESSAGES = gql`\nquery {\n  messages {\n    id\n    content\n    user\n  }\n}`;\n\nconst Button = styled.button`\n  \n  border-radius: 3px;\n  border: 1px solid #FFFFFF;\n  background: #ffffff;\n  box-shadow:  10px 10px 20px #d9d9d9, -10px -10px 20px #ffffff;\n`;\n\n\nconst Input = styled.input`\n  border-radius: 5px;\n  margin-right: 30px;\n  margin-top: 30px;\n  border: 1px solid #FFFFFF;\n  background: #ffffff;\n  box-shadow:  20px 20px 30px #0F296B, -20px -20px 30px #ffffff;\n  font-size: 12pt;\n  text-align: left;\n  color: #63717f;\n`;\n\nconst client = new ApolloClient({\n    uri: \"http://localhost:4000/\",\n    cache: new InMemoryCache()\n});\n\nconst Messages = ({ user }) => {\n    const  { data } = useQuery(GET_MESSAGES);\n    if( !data ) {\n        return null;\n    }\n\n    return (\n        <>\n          { data.messages.map(({ id, user: messageUser, content }) => (\n              <div \n                style={{\n                    display: 'flex',\n                    justifyContent: user === messageUser ? \"flex-end\" : \"flex-start\",\n                    paddingBottom: \"1em\",\n                }}\n              >\n              { user !== messageUser && (\n                  <div \n                  style={{\n                      height: 50,\n                          width: 50,\n                          marginRight: '0.5em', \n                          border: '2px solid #e5e6ea',\n                          borderRadius: 25,\n                          textAlign: \"center\",\n                          fontSize: \"18pt\",\n                          paddingTop: 5,\n                  }}\n                  >   \n                  {\n                      messageUser.slice(0, 2).toUpperCase()\n                  }\n                  </div>\n              )}\n\n              <div\n                style={{\n                    background: user === messageUser ? \"#58bf56\" : \"#e5e6ea\",\n                    color: user === messageUser ? \"white\" : \"black\",\n                    padding: \"1em\",\n                    borderRadius: \"1em\",\n                    maxWidth: \"60%\",\n                }}\n              >\n                { content }\n             </div>  \n            </div>\n          ))}\n        </>\n        )\n}\n\n\nconst Chat = () => {\n    const [state, stateSet] = React.useState({\n        user: \"Jack\",\n        content: '',\n    })\n    return (\n        <div>\n            <Messages user={state.user}/>\n            <Input\n                label=\"User\"\n                value={state.user}\n                onChange={(evt) => stateSet({\n                    ...state,\n                    user: evt.target.value,\n                })}/>\n            <Input\n                label=\"Content\"\n                value={state.content}\n                onChange={(evt) => stateSet({\n                    ...state,\n                    content: evt.target.value,\n                })}/>\n        <Button>Send</Button>\n        </div>\n  )\n}\n\nexport default () => (\n  <ApolloProvider client={client}>\n      <Chat />\n  </ApolloProvider>\n)\n"]},"metadata":{},"sourceType":"module"}