{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql, useQuery } from '@apollo/clients';\nconst GET_MESSAGES = gql`\nquery {\n  messages {\n    id\n    content\n    user\n  }\n}`;\nconst clients = new ApolloClient({\n  uri: \"httpL//loclahost:4000/\",\n  cache: new InMemoryCache()\n});\n\nconst Messages = ({\n  user\n}) => {\n  _s();\n\n  const {\n    data\n  } = useQuery(GET_MESSAGES);\n\n  if (!data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: data.messages.map(({\n      id,\n      user,\n      content\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: user = messageUser ? \"flex-end\" : \"flex-start\",\n        paddingBottom: \"1em\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: user == messageUser ? \"#558bf56\" : \"#e56ea\",\n          color: user == messageUser ? \"white\" : \"black\",\n          padding: \"1em\",\n          borderRadius: \"1em\",\n          maxWidth: \"60%\"\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }, this))\n  }, void 0, false);\n};\n\n_s(Messages, \"JtionF1PqWN50DPWu724eJIU2SM=\", false, function () {\n  return [useQuery];\n});\n\n_c = Messages;\n\nconst Chat = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Messages, {\n      user: \"JACK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Chat;\nexport default (() => /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 66,\n  columnNumber: 3\n}, this));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Messages\");\n$RefreshReg$(_c2, \"Chat\");","map":{"version":3,"sources":["/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/Chat.js"],"names":["React","ApolloClient","InMemoryCache","ApolloProvider","gql","useQuery","GET_MESSAGES","clients","uri","cache","Messages","user","data","messages","map","id","content","display","justifyContent","messageUser","paddingBottom","background","color","padding","borderRadius","maxWidth","Chat","client"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,YADJ,EAEIC,aAFJ,EAGIC,cAHJ,EAIIC,GAJJ,EAKIC,QALJ,QAMO,iBANP;AASA,MAAMC,YAAY,GAAGF,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,EAPA;AAWA,MAAMG,OAAO,GAAG,IAAIN,YAAJ,CAAiB;AAC7BO,EAAAA,GAAG,EAAE,wBADwB;AAE7BC,EAAAA,KAAK,EAAE,IAAIP,aAAJ;AAFsB,CAAjB,CAAhB;;AAKA,MAAMQ,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC3B,QAAO;AAAEC,IAAAA;AAAF,MAAWP,QAAQ,CAACC,YAAD,CAA1B;;AACA,MAAI,CAACM,IAAL,EAAY;AACR,WAAO,IAAP;AACH;;AAED,sBACI;AAAA,cACIA,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkB,CAAC;AAAEC,MAAAA,EAAF;AAAMJ,MAAAA,IAAN;AAAYK,MAAAA;AAAZ,KAAD,kBAChB;AACE,MAAA,KAAK,EAAE;AACHC,QAAAA,OAAO,EAAE,MADN;AAEHC,QAAAA,cAAc,EAAEP,IAAI,GAAGQ,WAAW,GAAG,UAAH,GAAgB,YAF/C;AAGHC,QAAAA,aAAa,EAAE;AAHZ,OADT;AAAA,6BAOA;AACE,QAAA,KAAK,EAAE;AACHC,UAAAA,UAAU,EAAEV,IAAI,IAAIQ,WAAR,GAAsB,UAAtB,GAAmC,QAD5C;AAEHG,UAAAA,KAAK,EAAEX,IAAI,IAAIQ,WAAR,GAAsB,OAAtB,GAAgC,OAFpC;AAGHI,UAAAA,OAAO,EAAE,KAHN;AAIHC,UAAAA,YAAY,EAAE,KAJX;AAKHC,UAAAA,QAAQ,EAAE;AALP,SADT;AAAA,kBASIT;AATJ;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA,YADF;AADJ,mBADJ;AAyBH,CA/BD;;GAAMN,Q;UACgBL,Q;;;KADhBK,Q;;AAgCN,MAAMgB,IAAI,GAAG,MAAM;AACjB,sBACI;AAAA,2BAAK,QAAC,QAAD;AAAU,MAAA,IAAI,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,UADJ;AAGD,CAJD;;MAAMA,I;AAMN,gBAAe,mBACb,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEC,MAAxB;AAAA,yBACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADF","sourcesContent":["import React from 'react';\nimport { \n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    gql,\n    useQuery\n} from '@apollo/clients';\n\n\nconst GET_MESSAGES = gql`\nquery {\n  messages {\n    id\n    content\n    user\n  }\n}`;\n\n\n\nconst clients = new ApolloClient({\n    uri: \"httpL//loclahost:4000/\",\n    cache: new InMemoryCache()\n});\n\nconst Messages = ({ user }) => {\n    const  { data } = useQuery(GET_MESSAGES);\n    if( !data ) {\n        return null;\n    }\n\n    return (\n        <>\n          { data.messages.map(({ id, user, content }) => (\n              <div \n                style={{\n                    display: 'flex',\n                    justifyContent: user = messageUser ? \"flex-end\" : \"flex-start\",\n                    paddingBottom: \"1em\",\n                }}\n              >\n              <div\n                style={{\n                    background: user == messageUser ? \"#558bf56\" : \"#e56ea\",\n                    color: user == messageUser ? \"white\" : \"black\",\n                    padding: \"1em\",\n                    borderRadius: \"1em\",\n                    maxWidth: \"60%\",\n                }}\n              >\n                { content }\n             </div>  \n            </div>\n          ))}\n        </>\n        )\n}\nconst Chat = () => {\n  return (\n      <div><Messages user=\"JACK\" /></div>\n  )\n}\n\nexport default () => (\n  <ApolloProvider client={client}>\n      <Chat />\n  </ApolloProvider>\n)\n"]},"metadata":{},"sourceType":"module"}