[{"/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/index.js":"1","/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/reportWebVitals.js":"2","/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/App.js":"3","/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/Chat.js":"4"},{"size":500,"mtime":1611618374123,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1611618374123,"results":"7","hashOfConfig":"6"},{"size":233,"mtime":1611620656844,"results":"8","hashOfConfig":"6"},{"size":5993,"mtime":1611838987511,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"pebj4x",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/index.js",[],["21","22"],"/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/reportWebVitals.js",[],"/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/App.js",["23","24"],"import logo from './logo.svg';\nimport './App.css';\nimport styled from 'styled-components';\nimport Chat from './Chat';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />      \n    </div>\n  );\n}\n\nexport default App;\n","/Users/omnyx2/Develope/ReactSideProject/realtime-chat-react-graphql/realtime-chat-client/src/Chat.js",["25","26","27","28"],"import React, { useState } from 'react';\nimport { \n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    gql,\n    useQuery,\n    useMutation,\n    useSubscription\n} from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport styled from 'styled-components';\n\nconst GET_MESSAGES = gql`\nsubscription {\n  messages {\n    id\n    content\n    user\n  }\n}`;\n\nconst POST_MESSAGE = gql`\n  mutation ($user: String!, $content: String!){\n    postMessage(user: $user, content: $content)\n  }`;\n\n\nconst Button = styled.button`\n  \n  border-radius: 3px;\n  border: 1px solid #FFFFFF;\n  background: #ffffff;\n  box-shadow:  10px 10px 20px #d9d9d9, -10px -10px 20px #ffffff;\n`;\n// from here to there is neumorphism UI\nconst Container = styled.div`\n  background-color: #E0E5EC;\n  align-center: {\n    text-align: center\n  }\n`\n\nconst NewButtonShape1 = styled.button`\n  border-radius: 50px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-right: 30px;\n  margin-top:100px;\n  margin-bottom:100px;\n  width:150px;\n  height:150px;\n  background-color:#E0E5EC;\n  box-shadow: 9px 9px 16px rgb(163,177,198,0.6), -9px -9px 16px    rgba(255,255,255, 0.5);\n  border: none;\n  outline: none;\n\n  &:focus {\n    box-shadow: none;\n  }\n\n`\nconst NewButtonShape2 = styled.button`\n  border-radius: 50px;\n  margin-left: auto;\n  margin-right: 30px;\n  margin-top:100px;\n  margin-bottom:100px;\n  width:150px;\n  height:150px;\n  background: linear-gradient(145deg, #caced4, #f0f5fd);\n  box-shadow: 9px 9px 16px rgb(163,177,198,0.6), -9px -9px 16px    rgba(255,255,255, 0.5);\n  border: none;\n  outline: none;\n\n  &:focus {\n    box-shadow: none;\n  }\n\n`\nconst NewButtonShape3 = styled.button`\n  border-radius: 50px;\n  margin-left: auto;\n  margin-top:100px;\n  margin-right: 30px;\n  margin-bottom:100px;\n  width:150px;\n  height:150px;\n  background: linear-gradient(145deg, #f0f5fd, #caced4);\n  box-shadow: 9px 9px 16px rgb(163,177,198,0.6), -9px -9px 16px    rgba(255,255,255, 0.5);\n  border: none;\n  outline: none;\n\n  &:focus {\n    box-shadow: none;\n  }\n\n`\nconst NewButtonShape4 = styled.button`\n  border-radius: 50px;\n  margin-left: auto;\n  margin-top:100px;\n  margin-right: 30px;\n  margin-bottom:100px;\n  width:150px;\n  height:150px;\n  background-color:#E0E5EC;\n  box-shadow: inset 20px 20px 60px #bec3c9,\n            inset -20px -20px 60px #ffffff;\n  border: none;\n  outline: none;\n\n  &: focus {\n    box-shadow: none;\n  }\n\n`\n\nconst Input = styled.input`\n  border-radius: 5px;\n  margin-right: 30px;\n  margin-top: 30px;\n  border: 1px solid #FFFFFF;\n  background: #ffffff;\n  box-shadow:  10px 10px 20px #d9d9d9, -10px -10px 20px #ffffff;\n  font-size: 12pt;\n  text-align: left;\n  color: #63717f;\n`;\n\nconst link = new WebSocketLink({\n  uri: 'ws://localhost:4000/',\n  options: {\n    reconnect: true\n  }\n});\n\nconst client = new ApolloClient({\n    link,\n    uri: \"http://localhost:4000/\",\n    cache: new InMemoryCache()\n});\n\nconst Messages = ({ user }) => {\n    const  { data } = useSubscription(GET_MESSAGES);\n    if( !data ) {\n        return null;\n    }\n\n    return (\n        <>\n              \n          { data.messages.map(({ id, user: messageUser, content }) => (\n              <div \n                style={{\n                    display: 'flex',\n                    justifyContent: user === messageUser ? \"flex-end\" : \"flex-start\",\n                    paddingBottom: \"1em\",\n                }}\n              >\n              { user !== messageUser && (\n                  <div \n                  style={{\n                      height: 50,\n                          width: 50,\n                          marginRight: '0.5em', \n                          border: '2px solid #e5e6ea',\n                          borderRadius: 25,\n                          textAlign: \"center\",\n                          fontSize: \"18pt\",\n                          paddingTop: 5,\n                  }}\n                  >   \n                  {\n                      messageUser.slice(0, 2).toUpperCase()\n                  }\n                  </div>\n              )}\n\n              <div\n                style={{\n                    background: user === messageUser ? \"#58bf56\" : \"#e5e6ea\",\n                    color: user === messageUser ? \"white\" : \"black\",\n                    padding: \"1em\",\n                    borderRadius: \"1em\",\n                    maxWidth: \"60%\",\n                }}\n              >\n                { content }\n             </div>  \n            </div>\n          ))}\n        </>\n        )\n}\n\n\nconst Chat = () => {\n    const [state, stateSet] = React.useState({\n        user: \"Jack\",\n        content: '',\n    })\n    const [postMessage] = useMutation(POST_MESSAGE);\n    const onSend = () => {\n        if(state.content.length > 0) {\n          postMessage({ \n              variables: state,\n          })\n        }\n        stateSet({\n            ...state,\n            content: \"\",\n        })\n      \n    }\n    return (\n        <div>\n            <Container>\n                <NewButtonShape1>1.</NewButtonShape1>\n                <NewButtonShape2>2.</NewButtonShape2>\n                <NewButtonShape3>3.</NewButtonShape3>\n                <NewButtonShape4>4.</NewButtonShape4>\n            </Container>\n            <Messages user={state.user}/>\n            <Input\n                label=\"User\"\n                value={state.user}\n                onChange={(evt) => stateSet({\n                    ...state,\n                    user: evt.target.value,\n                })}/>\n            <Input\n                label=\"Content\"\n                value={state.content}\n                onChange={(evt) => stateSet({\n                    ...state,\n                    content: evt.target.value,\n                })}\n                onKeyUp={(evt) => {\n                    if( evt.keyCode == 13) {\n                        onSend()\n                    }}}\n            />\n                <Button onClick={()=> onSend()}>Send</Button>\n        </div>\n  )\n}\n\nexport default () => (\n  <ApolloProvider client={client}>\n      <Chat />\n  </ApolloProvider>\n)\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"33","severity":1,"message":"37","line":3,"column":8,"nodeType":"35","messageId":"36","endLine":3,"endColumn":14},{"ruleId":"33","severity":1,"message":"38","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":25},{"ruleId":"33","severity":1,"message":"39","line":7,"column":5,"nodeType":"35","messageId":"36","endLine":7,"endColumn":13},{"ruleId":"40","severity":1,"message":"41","line":240,"column":37,"nodeType":"42","messageId":"43","endLine":240,"endColumn":39},{"ruleId":"44","severity":1,"message":"45","line":249,"column":1,"nodeType":"46","endLine":253,"endColumn":2},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'useState' is defined but never used.","'useQuery' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]